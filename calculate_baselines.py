import pandas as pd
import numpy as np

def calculate_baselines(filepath):
    """Calcule les baselines exactes pour √©valuer la performance du mod√®le"""
    print("üìä CALCUL DES BASELINES ODDSY")
    print("=" * 50)
    
    # Load dataset
    df = pd.read_csv(filepath)
    print(f"Dataset: {len(df)} matchs")
    
    # Distribution r√©elle
    result_counts = df['FullTimeResult'].value_counts()
    total = len(df)
    
    print(f"\nüìà DISTRIBUTION R√âELLE:")
    probs = {}
    for result in ['H', 'D', 'A']:
        count = result_counts.get(result, 0)
        prob = count / total
        probs[result] = prob
        print(f"   {result}: {count:4d} matchs ({prob:.1%})")
    
    # Baseline 1: Hasard pur (33/33/33)
    baseline_random = 1/3
    print(f"\nüé≤ BASELINE 1 - HASARD PUR:")
    print(f"   Accuracy attendue: {baseline_random:.1%}")
    
    # Baseline 2: Toujours pr√©dire classe majoritaire
    majority_class = result_counts.idxmax()
    baseline_majority = result_counts.max() / total
    print(f"\nüèÜ BASELINE 2 - CLASSE MAJORITAIRE:")
    print(f"   Toujours pr√©dire '{majority_class}': {baseline_majority:.1%}")
    
    # Baseline 3: Pr√©diction probabiliste selon distribution
    # Si on pr√©dit al√©atoirement selon les vraies probabilit√©s
    baseline_prob = sum(prob**2 for prob in probs.values())
    print(f"\nüéØ BASELINE 3 - HASARD POND√âR√â:")
    print(f"   Pr√©diction selon distribution r√©elle: {baseline_prob:.1%}")
    
    # Baseline 4: Strat√©gie "intelligente" simple
    # Toujours Home sauf si √©quipe visiteur tr√®s forte (simulation)
    home_wins = result_counts.get('H', 0)
    baseline_home_bias = home_wins / total
    print(f"\nüè† BASELINE 4 - BIAIS DOMICILE:")
    print(f"   Toujours pr√©dire Home: {baseline_home_bias:.1%}")
    
    # Objectifs pour le mod√®le ML
    print(f"\nüéØ OBJECTIFS POUR TON MOD√àLE ML:")
    print(f"   ‚Ä¢ Minimum acceptable: > {max(baseline_majority, baseline_prob):.1%}")
    print(f"   ‚Ä¢ Bon mod√®le: > 50%")
    print(f"   ‚Ä¢ Excellent mod√®le: > 55%")
    
    # F1-Score par classe (pour g√©rer d√©s√©quilibre)
    print(f"\nüìè M√âTRIQUES RECOMMAND√âES:")
    print(f"   ‚Ä¢ Accuracy globale")
    print(f"   ‚Ä¢ F1-macro (moyenne F1 de H/D/A)")
    print(f"   ‚Ä¢ Confusion Matrix d√©taill√©e")
    print(f"   ‚Ä¢ Pr√©cision sur classe 'D' (la plus difficile)")
    
    return {
        'random': baseline_random,
        'majority': baseline_majority,
        'weighted': baseline_prob,
        'home_bias': baseline_home_bias,
        'distribution': probs
    }

if __name__ == "__main__":
    # Calculer sur le dataset ML-ready
    baselines = calculate_baselines('/Users/maxime/Desktop/Oddsy/data/processed/premier_league_ml_ready.csv')
    
    print(f"\nüí° R√âSUM√â:")
    print(f"   Ton mod√®le DOIT battre: {max(baselines['majority'], baselines['weighted']):.1%}")
    print(f"   Objectif r√©aliste: ~52-55%")
    print(f"   Si > 55%: tr√®s bon mod√®le pour pr√©diction foot!")